import UIKit

class DataViewController: UIViewController, FBSDKLoginButtonDelegate {
    
    @IBOutlet weak var dataLabel: UILabel!  // Generated by the XCode template
    var dataModel: DataModel? // Make this optional; we will initialize later

    override func viewDidLoad() {
        print("Loaded DataViewController")
        super.viewDidLoad()
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    override func viewWillAppear(animated: Bool) {
        super.viewWillAppear(animated)
        print("viewWillAppear() hit.")
        if let user = self.dataModel?.user {
            dataLabel.text = "Welcome, \(user.name)"
            dataLabel.hidden = false
            self.saveFbToken()
        } else {
            dataLabel.hidden = true
            print("fbUser not set!  How did we get here?")
        }
    }
    
    func initialize(dataModel: DataModel) {
        self.dataModel = dataModel
    }
    
    // Disables all UI elements on this screen by greying them out or hiding them.  Also see viewWillAppear(), which does the opposite.
    func disableScreen() {
        dataLabel.hidden = true
    }
    
    
    //Login to connectastic using endpoint library
    func loginToConnectastic() {
        if let dm = dataModel {
            if dm.fbToken != nil {
                let service = GTLServiceAuth()
                service.retryEnabled = true
                let request = GTLAuthConnectasticAuthReq()
                
                let uids = dm.user?.userID
                // WARNING this can thrown a runtime error if the user is nil. TODO(manik) make this more nil-safe
                request.fbId = Int(uids!)!
                request.token = dm.fbToken
            
                let query = GTLQueryAuth.queryForLoginWithObject(request)

                service.executeQuery(query) { (ticket: GTLServiceTicket?, rsp: AnyObject?, error: NSError?) -> Void in
                    if let err = error {
                        print("ExecuteQuery: result is nil; error: \(err)")
                        return
                    }
                    // So type-unsafe! Casting, yuk!
                    let result = rsp as! GTLAuthConnectasticAuthRsp
                    print("\(result.name) has logged into Connectastic. Status: \(result.loggedIn)")
                }
            }
        }
    }
        
    //Store the fb token of the current session in the data model
    func saveFbToken() {
        let token = FBSDKAccessToken.currentAccessToken().tokenString
        print("Current session token:  \(token)")
        dataModel!.setFbToken(token)
        loginToConnectastic()
    }
    
    // Facebook Delegate Methods
    func loginButton(loginButton: FBSDKLoginButton?, didCompleteWithResult result: FBSDKLoginManagerLoginResult?, error: NSError?) {
        print("How did we get here?")
    }
    
    func loginButtonDidLogOut(loginButton: FBSDKLoginButton?) {
        // TODO transition to splash screen
    }
}

