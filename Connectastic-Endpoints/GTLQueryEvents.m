/* This file was generated by the ServiceGenerator.
 * The ServiceGenerator is Copyright (c) 2015 Google Inc.
 */

//
//  GTLQueryEvents.m
//

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   events/v1
// Description:
//   Handles events
// Classes:
//   GTLQueryEvents (9 custom class methods, 4 custom properties)

#import "GTLQueryEvents.h"

#import "GTLEventsConnectasticCreateEventRsp.h"
#import "GTLEventsConnectasticEventRsp.h"
#import "GTLEventsConnectasticEventsRsp.h"
#import "GTLEventsConnectasticModifyEventReq.h"
#import "GTLEventsConnectasticNewEventReq.h"
#import "GTLEventsConnectasticUpdateParticipantsReq.h"

@implementation GTLQueryEvents

@dynamic eventId, fields, identifier, token;

+ (NSDictionary *)parameterNameMap {
  NSDictionary *map = @{
    @"eventId" : @"event_id",
    @"identifier" : @"id"
  };
  return map;
}

#pragma mark - Service level methods
// These create a GTLQueryEvents object.

+ (instancetype)queryForCancelWithIdentifier:(NSString *)identifier
                                       token:(NSString *)token {
  NSString *methodName = @"events.cancel";
  GTLQueryEvents *query = [self queryWithMethodName:methodName];
  query.identifier = identifier;
  query.token = token;
  return query;
}

+ (instancetype)queryForCreateWithObject:(GTLEventsConnectasticNewEventReq *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"events.create";
  GTLQueryEvents *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLEventsConnectasticCreateEventRsp class];
  return query;
}

+ (instancetype)queryForEditWithObject:(GTLEventsConnectasticModifyEventReq *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"events.edit";
  GTLQueryEvents *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  return query;
}

+ (instancetype)queryForGetWithIdentifier:(NSString *)identifier
                                    token:(NSString *)token {
  NSString *methodName = @"events.get";
  GTLQueryEvents *query = [self queryWithMethodName:methodName];
  query.identifier = identifier;
  query.token = token;
  query.expectedObjectClass = [GTLEventsConnectasticEventRsp class];
  return query;
}

+ (instancetype)queryForListDetailsWithIdentifier:(NSString *)identifier
                                            token:(NSString *)token {
  NSString *methodName = @"events.list_details";
  GTLQueryEvents *query = [self queryWithMethodName:methodName];
  query.identifier = identifier;
  query.token = token;
  query.expectedObjectClass = [GTLEventsConnectasticEventsRsp class];
  return query;
}

+ (instancetype)queryForListSummaryWithIdentifier:(NSString *)identifier
                                            token:(NSString *)token {
  NSString *methodName = @"events.list_summary";
  GTLQueryEvents *query = [self queryWithMethodName:methodName];
  query.identifier = identifier;
  query.token = token;
  query.expectedObjectClass = [GTLEventsConnectasticEventsRsp class];
  return query;
}

+ (instancetype)queryForPickWithEventId:(NSString *)eventId
                             identifier:(NSString *)identifier
                                  token:(NSString *)token {
  NSString *methodName = @"events.pick";
  GTLQueryEvents *query = [self queryWithMethodName:methodName];
  query.eventId = eventId;
  query.identifier = identifier;
  query.token = token;
  return query;
}

+ (instancetype)queryForUnpickWithIdentifier:(NSString *)identifier
                                       token:(NSString *)token {
  NSString *methodName = @"events.unpick";
  GTLQueryEvents *query = [self queryWithMethodName:methodName];
  query.identifier = identifier;
  query.token = token;
  return query;
}

+ (instancetype)queryForUpdateParticipantsWithObject:(GTLEventsConnectasticUpdateParticipantsReq *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"events.update_participants";
  GTLQueryEvents *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  return query;
}

@end
